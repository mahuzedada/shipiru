---
# main.yml
- name: Setup Kubernetes and containerd locally
  hosts: localhost
  connection: local
  become: yes
  vars:
    k8s_user: ubuntu
    kubeconfig: "/home/{{ k8s_user }}/.kube/config"
  tasks:
    - name: Display current user
      debug:
        msg: "Current user is {{ k8s_user }}"
    - name: Stop Kubernetes-related services
      systemd:
        name: "{{ item }}"
        state: stopped
      loop:
        - kubelet
        - containerd
      ignore_errors: yes

    - name: Reset Kubernetes cluster
      command: kubeadm reset -f
      ignore_errors: yes

    - name: Remove Kubernetes directories and files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/kubernetes
        - /var/lib/kubelet
        - /var/lib/etcd
        - "{{ kubeconfig }}"

    - name: Clear iptables
      command: "{{ item }}"
      loop:
        - iptables -F
        - iptables -t nat -F
        - iptables -t mangle -F
        - iptables -X

    - name: Check if port 6443 is in use
      wait_for:
        port: 6443
        state: stopped
        timeout: 5
      ignore_errors: yes
      register: port_check

    - name: Kill process using port 6443
      shell: fuser -k 6443/tcp
      when: port_check.failed
      ignore_errors: yes

    - name: Restart containerd
      systemd:
        name: containerd
        state: restarted
        daemon_reload: yes

    - name: Include containerd installation tasks
      include_tasks: tasks/install_containerd.yml

    - name: Include Kubernetes installation tasks
      include_tasks: tasks/install_kubernetes.yml

    - name: Enable and start kubelet service
      systemd:
        name: kubelet
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Initialize Kubernetes cluster
      command: kubeadm init --pod-network-cidr=10.244.0.0/16
      register: kubeadm_init
      changed_when: kubeadm_init.rc == 0

    - name: Create .kube directory
      file:
        path: "/home/{{ k8s_user }}/.kube"
        state: directory
        mode: '0755'
        owner: "{{ k8s_user }}"
        group: "{{ k8s_user }}"

    - name: Copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ kubeconfig }}"
        remote_src: yes
        owner: "{{ k8s_user }}"
        group: "{{ k8s_user }}"
        mode: '0600'

    - name: Generate kubeconfig if it doesn't exist
      command: kubeadm kubeconfig user --org system:masters --client-name admin
      register: kubeconfig_content
      when: not ansible_check_mode

    - name: Ensure kubeconfig directory exists
      file:
        path: "/home/{{ k8s_user }}/.kube"
        state: directory
        mode: '0755'
        owner: "{{ k8s_user }}"
        group: "{{ k8s_user }}"

    - name: Write kubeconfig
      copy:
        content: "{{ kubeconfig_content.stdout }}"
        dest: "{{ kubeconfig }}"
        owner: "{{ k8s_user }}"
        group: "{{ k8s_user }}"
        mode: '0600'
      when: kubeconfig_content.changed

    - name: Wait for Kubernetes API to become available
      command: kubectl --kubeconfig {{ kubeconfig }} get nodes
      register: kubectl_result
      until: kubectl_result.rc == 0
      retries: 12
      delay: 10
      become: yes
      become_user: "{{ k8s_user }}"

    - name: Install Calico network
      command: kubectl --kubeconfig {{ kubeconfig }} apply -f https://docs.projectcalico.org/manifests/calico.yaml
      become: yes
      become_user: "{{ k8s_user }}"

    - name: Allow pods to be scheduled on the control-plane node
      command: kubectl --kubeconfig {{ kubeconfig }} taint nodes --all node-role.kubernetes.io/control-plane-
      become: yes
      become_user: "{{ k8s_user }}"

    - name: Download Helm installation script
      get_url:
        url: https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
        dest: /tmp/get_helm.sh
        mode: '0700'
      become: yes

    - name: Install Helm
      command: /tmp/get_helm.sh
      become: yes

    - name: Add Helm binary to PATH for ansible user
      lineinfile:
        path: /home/{{ k8s_user }}/.bashrc
        line: 'export PATH=$PATH:/usr/local/bin'
        state: present
      become: yes
      become_user: "{{ k8s_user }}"

    - name: Source .bashrc to update PATH
      shell: source /home/{{ k8s_user }}/.bashrc
      args:
        executable: /bin/bash
      become: yes
      become_user: "{{ k8s_user }}"

    - name: Add Nginx Ingress Helm repository
      command: helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
      become: yes
      become_user: "{{ k8s_user }}"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin"

    - name: Update Helm repositories
      command: helm repo update
      become: yes
      become_user: "{{ k8s_user }}"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin"

    - name: Install Nginx Ingress Controller
      command: >
        helm install ingress-nginx ingress-nginx/ingress-nginx
        --set controller.service.type=NodePort
        --set controller.service.nodePorts.http=30080
        --set controller.service.nodePorts.https=30443
      become: yes
      become_user: "{{ k8s_user }}"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin"

    - name: Wait for Ingress Controller to be ready
      command: kubectl --kubeconfig {{ kubeconfig }} wait --namespace default --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=120s
      become: yes
      become_user: "{{ k8s_user }}"

    - name: Get cluster info
      command: kubectl --kubeconfig {{ kubeconfig }} cluster-info
      register: cluster_info
      become: yes
      become_user: "{{ k8s_user }}"

    - name: Display cluster info
      debug:
        var: cluster_info.stdout_lines

    - name: Verify nodes are ready
      command: kubectl --kubeconfig {{ kubeconfig }} get nodes
      register: nodes_status
      become: yes
      become_user: "{{ k8s_user }}"

    - name: Display nodes status
      debug:
        var: nodes_status.stdout_lines

    - name: Get Ingress Controller service info
      command: kubectl --kubeconfig {{ kubeconfig }} get service ingress-nginx-controller
      register: ingress_service
      become: yes
      become_user: "{{ k8s_user }}"

    - name: Display Ingress Controller service info
      debug:
        var: ingress_service.stdout_lines

    - name: Setup iptables rule for port forwarding
      iptables:
        table: nat
        chain: PREROUTING
        protocol: tcp
        match: tcp
        destination_port: 80
        jump: REDIRECT
        to_ports: 30080
      become: yes
- name: Install iptables-persistent
  apt:
    name: iptables-persistent
    state: present
  become: yes
- name: Save iptables rules
  command: netfilter-persistent save
  become: yes
- name: Create a test deployment
  command: kubectl --kubeconfig {{ kubeconfig }} create deployment nginx --image=nginx
  become: yes
  become_user: "{{ k8s_user }}"

- name: Expose the test deployment
  command: kubectl --kubeconfig {{ kubeconfig }} expose deployment nginx --port=80 --type=NodePort
  become: yes
  become_user: "{{ k8s_user }}"
- name: Create a basic Ingress resource
  command: |
    kubectl --kubeconfig {{ kubeconfig }} apply -f - <<EOF
    apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      name: nginx-ingress
    spec:
      rules:
      - http:
          paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: nginx
                port: 
                  number: 80
    EOF
  become: yes
  become_user: "{{ k8s_user }}"

