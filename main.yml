---
# main.yml
- name: Setup Kubernetes and containerd locally
  hosts: localhost
  connection: local
  become: yes
  vars:
    k8s_user: "{{ ansible_user_id | default(lookup('env', 'USER')) }}"
    kubeconfig: "/home/{{ k8s_user }}/.kube/config"
  tasks:
    - name: Display current user
      debug:
        msg: "Current user is {{ k8s_user }}"
    - name: Stop Kubernetes-related services
      systemd:
        name: "{{ item }}"
        state: stopped
      loop:
        - kubelet
        - containerd
      ignore_errors: yes

    - name: Reset Kubernetes cluster
      command: kubeadm reset -f
      ignore_errors: yes

    - name: Remove Kubernetes directories and files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/kubernetes
        - /var/lib/kubelet
        - /var/lib/etcd
        - "{{ kubeconfig }}"

    - name: Clear iptables
      command: "{{ item }}"
      loop:
        - iptables -F
        - iptables -t nat -F
        - iptables -t mangle -F
        - iptables -X

    - name: Check if port 6443 is in use
      wait_for:
        port: 6443
        state: stopped
        timeout: 5
      ignore_errors: yes
      register: port_check

    - name: Kill process using port 6443
      shell: fuser -k 6443/tcp
      when: port_check.failed
      ignore_errors: yes

    - name: Restart containerd
      systemd:
        name: containerd
        state: restarted
        daemon_reload: yes

    - name: Include containerd installation tasks
      include_tasks: tasks/install_containerd.yml

    - name: Include Kubernetes installation tasks
      include_tasks: tasks/install_kubernetes.yml

    - name: Enable and start kubelet service
      systemd:
        name: kubelet
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Initialize Kubernetes cluster
      command: kubeadm init --pod-network-cidr=10.244.0.0/16
      register: kubeadm_init
      changed_when: kubeadm_init.rc == 0

    - name: Create .kube directory
      file:
        path: "/home/{{ k8s_user }}/.kube"
        state: directory
        mode: '0755'
        owner: "{{ k8s_user }}"
        group: "{{ k8s_user }}"

    - name: Copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ kubeconfig }}"
        remote_src: yes
        owner: "{{ k8s_user }}"
        group: "{{ k8s_user }}"
        mode: '0600'

    - name: Wait for Kubernetes API to become available
      command: kubectl --kubeconfig {{ kubeconfig }} get nodes
      register: kubectl_result
      until: kubectl_result.rc == 0
      retries: 12
      delay: 10
      become: yes
      become_user: "{{ k8s_user }}"

    - name: Install Calico network
      command: kubectl --kubeconfig {{ kubeconfig }} apply -f https://docs.projectcalico.org/manifests/calico.yaml
      become: yes
      become_user: "{{ k8s_user }}"

    - name: Allow pods to be scheduled on the control-plane node
      command: kubectl --kubeconfig {{ kubeconfig }} taint nodes --all node-role.kubernetes.io/control-plane-
      become: yes
      become_user: "{{ k8s_user }}"

    - name: Get cluster info
      command: kubectl --kubeconfig {{ kubeconfig }} cluster-info
      register: cluster_info
      become: yes
      become_user: "{{ k8s_user }}"

    - name: Display cluster info
      debug:
        var: cluster_info.stdout_lines
